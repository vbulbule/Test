package com.vitthal.java.jdbc;

import java.sql.*;

public class OracleDataBaseConnection {

	  /*

    JDBC : Java Database Connectivity Oracle


    Oracle Database                      ---Connection ---                          Java
                                     Middelman (Oracle Driver)

     TO connect the java appliation with the oracle database we need to follw 5 steps
     1. Driver Oracle
     2. Connection Url  of oracle databasse :
          generally URL looks like : jdbc:oracle:thin:@localhost:1521:xe
     3. Username of oracle
     4. Password of oracle
         for authentication

         */
    public static void main(String[] args) throws ClassNotFoundException, SQLException {

        //--------------------------------------------------------------------------------------------
        //Step 1 : load the driver
        /*
        to connect with Oracle dataBase we nne to tell our java code to where we need to point
        and which library need to be used to connect with the database
        for example : oracle.jdbc.driver.OracleDriver
          - this oracle driver will use to connect with the Oracle database wnd JVM will understands with the driver
          that we need to connect to the database
         */
        Class.forName("oracle.jdbc.driver.OracleDriver");
        //=---------------------------------------------------------------------------------------------------------
        // step 2 : create the connection to oracle
        /*
        Driver Manager is the Basic service for managing a set of JDBC drivers

        GetConnection()
        Attempts to establish a connection to the given database URL.
        The DriverManager attempts to select an appropriate driver from the set of registered JDBC drivers.
        Note: If the user or password property are also specified as part of the url,
        it is implementation-defined as to which value will take precedence.
        For maximum portability, an application should only specify a property once

        and it returns the Connection to the specified URL
         */
        Connection con = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:orcl","sys as sysdba","Oracle@1");

        /*
        if the connection con s null = there is some issue with the connection
        if its not null means : connection is established
         */
        if(! (con==null))
            System.out.println("Oracle connection is successfully created");
        //=---------------------------------------------------------------------------------------------------------

        // step 3 : create stetment
        /*
        createStatement() method will Creates a Statement object for sending SQL statements to the database.

        returns Statement Object
        The Statement object used for executing a static SQL statement and returning the results it produces.
        By default, only one ResultSet object per Statement object can be open at the same time.
         */

        Statement stmt = con.createStatement();
        //=---------------------------------------------------------------------------------------------------------
        // step 4: write query or any other operation on database
        String query = "select * from student";
        /*
        stmt.executeQuery(query)
        - Executes the given SQL statement, which returns a single ResultSet object.
          Note:This method cannot be called on a PreparedStatement or CallableStatement.

          Returns the ResultSet
          - A table of data representing a database result set,
            which is usually generated by executing a statement that queries the database.
         */
        ResultSet data = stmt.executeQuery(query);

        /*
        Printing the data in resultset
         */
        while (data.next()){
            System.out.println(data.getInt("STDID")+ " "+ data.getString("STDNAME")+" "+ data.getInt("STDAGE"));
        }

        //=---------------------------------------------------------------------------------------------------------
        //Step 5 : close the connection
        con.close();
    }
}
